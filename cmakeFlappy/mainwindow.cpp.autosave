#include "mainwindow.h"
#include <QDebug>
#include "awardPrize.h"
#include "myKeyEvents.h"
#include "gameelement.h"
#include "string"


#include <linux/joystick.h>

/* Esta clase contiene codigo espagueti
 * si alguien intenta entenderla y modificarla
 * por favor disculpe
 */

using namespace std;

//Constructor
/**
 * @brief MainWindow::MainWindow: Maneja la logica del juego.
 * @param parent: Objeto padre, es el que llaa a esta clase.
 */
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
      settings("/home/" + qgetenv("USER") + "/.config/flappyBirdConfig/config.ini", QSettings::IniFormat)
{
    /**
    Se esperan 5 segundos para asegurar la coneccion
    con esl puerto serial
    **/
    sleep(5);
    jos = new joystick_flappy(this);
    jos->abrir_joystick();
    jos->start();

    /**
     *se leen las configuraciones guardadas en el
     * archivo $HOME/.config/flappyBird/config.ini
    **/
    priceLife= settings.value("priceLife").toInt();
    levelOccilation= settings.value("levelOccilation").toInt();
    initialVelocity= settings.value("initialVelocity").toDouble();
    increaseVelocity= settings.value("increaseVelocity").toDouble();
    //numberOfLevelPipes= settings.value("numberOfLevelPipes").toInt();
    //numberOfLevelPipes= 10;
    int intKeyUp= settings.value("keyUpPin").toInt();
    int intKeyLeft= settings.value("keyLeftPin").toInt();
    int intKeyRight= settings.value("keyRightPin").toInt();
    int intKeyBack= settings.value("keyBackPin").toInt();
    int intCoinAceptor= settings.value("coinAceptorPin").toInt();
    int intProductsManager= settings.value("productsManagerPin").toInt();
    double birdUpVelocity= settings.value("birdUpVelocity").toDouble();
    double birdDownAceleration= settings.value("birdDownAceleration").toDouble();
    int gameLives= settings.value("gameLives").toInt();
    int gameLevel= settings.value("gameLevel").toInt();
    int gameScore= settings.value("gameScore").toInt();

    ///se lee el numero correspondiente de tubos para cada nivel
    int i=0;
    while(i < 9){
        QString a = QString("pipesLevel%1").arg(i + 1);
        pipesLevel[i] = settings.value(a).toInt();
        //pipesLevel[i] = settings.value("pipesLevel1").toInt();
        qDebug() << pipesLevel[i] << "numero de tubos nivel " << i << /*a*/ endl ;
        //pipesLevel[i] = 1;
        ++i;
    }
    currentPipesToPass= 0;

    serialPort.configure_puerto();


    //setFocusPolicy(Qt::NoFocus);
    qsrand(QTime::currentTime().second());
    bufferPixmap = new QPixmap(288,512);
    // Set size.
    resize(540,760);
//    resize();

    /* Init 2 buttons. */
    windowPrize= new awardPrize(this);
    //windowPrize->getManager()->setSensor(intProductsManager);
    startButton = new QPushButton(this);
    startButton->setGeometry(QRect((20.0/288)* width(),
                                   (341.0/512)* height(),
                                   (117.0/288)* width(),
                                   (71.0/512)* height()));

    startButton->setStyleSheet("QPushButton{border-image:url(" +  GameElement::url + "image/button_play.png);}" +
                               "QPushButton:pressed{margin: 2px 2px 2px 2px;}"
                               "QPushButton:focus{margin: 5px 5px 5px 5px}"
                               "QPushButton{margin: 10px 10px 10px 20px}");

    connect(startButton, &QPushButton::pressed, this,  [=](){
        if(level == 10) return;
        if(level==9){
            prizeButton->pressed();
            return;
        }
        setNextLevel();
        startGame();
    } );

    prizeButton = new QPushButton(this);
    prizeButton->setGeometry(QRect((151.0/288)* width(),
                                   (341.0/512)* height(),
                                   (117.0/288)* width(),
                                   (71.0/512)* height()));


    prizeButton->setStyleSheet("QPushButton{border-image:url(" +  GameElement::url + "image/reclamar_premio.png);}" +
                               "QPushButton:pressed{margin: 2px 2px 2px 2px;}"
                               "QPushButton:focus{margin: 5px 5px 5px 5px}"
                               "QPushButton{margin: 10px 10px 10px 10px}");

    prizeButton->setEnabled(false);
    //prizeButton->setVisible(false);
    connect( prizeButton, SIGNAL(pressed()), this, SLOT(deliverPrize()));

    /* Init all the game elements. */
    background = new EleBackground();
    ground = new EleGround();
    bird = new EleBird();
    bird->setDownAceleration(birdDownAceleration);
    bird->setUpVelocity(birdUpVelocity);
    scoreboard = new EleScoreBoard(QRectF(20.5, 0.0, 10.0, 25.0));
    readyboard = new EleReadyBoard(this);
    overboard = new EleOverBoard();
    titleboard = new EleTitleBoard();
    pipe[0] = new ElePipe(false, 0);
    pipe[1] = new ElePipe(false, 1);
    pipe[2] = new ElePipe(false, 2);
    pipe[0]->setOccilation(false);
    pipe[1]->setOccilation(false);
    pipe[2]->setOccilation(false);

    pipe[0]->setSpeedX(initialVelocity);
    pipe[1]->setSpeedX(initialVelocity);
    pipe[2]->setSpeedX(initialVelocity);

    livesboard= new EleScoreBoard(QRectF(131.5, 0.0, 25.0, 45.0));
    levelboard= new EleScoreBoard(QRectF(242.5, 0.0, 25.0, 45.0));


    impactBirdRect.setRect(0,0,0.4* bird->getBindRect().width(),
                           0.4* bird->getBindRect().height());

    /* Sound */
    soundDie = new QSound( GameElement::url + "sounds/sfx_die.wav");
    soundHit = new QSound( GameElement::url + "sounds/sfx_hit.wav");
    soundPoint = new QSound( GameElement::url + "sounds/sfx_point.wav");
    soundAlarm = new QSound(GameElement::url + "sounds/alarma.wav");
    soundlevelup = new QSound(GameElement::url + "sounds/nivel.wav");
    soundfail = new QSound(GameElement::url + "sounds/fail.wav");

    //soundPoint->play();
    soundSwooshing = new QSound( GameElement::url + "sounds/sfx_swooshing.wav");
    soundWing = new QSound( GameElement::url + "sounds/sfx_wing.wav");

    /* The refresh rate : 50Hz */
    connect(&timer,SIGNAL(timeout()),this,SLOT(update()));
    timer.start(20);

    /* Connect signals and slots */
    connect( pipe[0],SIGNAL(pipePass()),this,SLOT(getScore()));
    connect( pipe[1],SIGNAL(pipePass()),this,SLOT(getScore()));
    connect( pipe[2],SIGNAL(pipePass()),this,SLOT(getScore()));

    connect( overboard,SIGNAL(buttonVisible(bool,bool,bool)),this,SLOT(setButtonVisible(bool,bool,bool)));
    connect(windowPrize, &awardPrize::selectedPrize, this, [=](){
        //displayInfo();
        prizeButton->setEnabled(false);
//        startButton->setEnabled(true);
        overboard->mostrarReclamarPremio(false);
        //prizeButton->setVisible(false);
        level= 0;
        settings.setValue("gameLevel",level);
        //gameTitle();
        //gameReady();
        gameOver();
        //gameReady();
    });


    // Game Start.
    level= gameLevel;
    if(level==0){level=1;}
    //level= 3;
    lives= gameLives;
//    lives= 5;
    if(lives == 0) readyboard->mostrarIngreseDinero(true);
    score= gameScore;

    scoreboard->setScore(score);
    livesboard->setScore(lives);
    levelboard->setScore(level);

    //gameTitle();
    gameReady();

    connect(this, SIGNAL(scoreChanged(int)), this, SLOT(nextLevel(int)));

    //------------------------Logica para ajustar dificultad imicial al nivel---------------
    if(level>1){
        if(level >= levelOccilation){
            if(level == levelOccilation){
                pipe[0]->setSpeedX(initialVelocity);
                pipe[1]->setSpeedX(initialVelocity);
                pipe[2]->setSpeedX(initialVelocity);
            }else if(level<8){
                pipe[0]->setSpeedX(initialVelocity +(increaseVelocity * (level-levelOccilation)));
                pipe[1]->setSpeedX(initialVelocity +(increaseVelocity * (level-levelOccilation)));
                pipe[2]->setSpeedX(initialVelocity +(increaseVelocity * (level-levelOccilation)));
            }else{
                pipe[0]->setSpeedX(initialVelocity +(increaseVelocity * (7-levelOccilation)));
                pipe[1]->setSpeedX(initialVelocity +(increaseVelocity * (7-levelOccilation)));
                pipe[2]->setSpeedX(initialVelocity +(increaseVelocity * (7-levelOccilation)));
            }
            //pipe[0]->setSpeedX(1.5);
            //pipe[1]->setSpeedX(1.5);
            //pipe[2]->setSpeedX(1.5);
            pipe[0]->setOccilation(true);
            pipe[1]->setOccilation(true);
            pipe[2]->setOccilation(true);
            pipe[0]->setRandomColor(true);
            pipe[1]->setRandomColor(true);
            pipe[2]->setRandomColor(true);
        }else{
            pipe[0]->setSpeedX(initialVelocity +(increaseVelocity * level));
            pipe[1]->setSpeedX(initialVelocity +(increaseVelocity * level));
            pipe[2]->setSpeedX(initialVelocity +(increaseVelocity * level));
        }
    }
    //--------------------------------------------------------------------------------------


    connect(jos, &joystick_flappy::buttom_pressed, this, [&](int boton){
        if(boton == 0){
            enterPressed();
        }else if(boton == 3){
            coinIn(500);
            serialPort.write("C1\r\n");
        }else if(boton == 2){
            left_pressed();
            serialPort.write("B3\r\n");
        }else if(boton == 1){
            right_pressed();
            serialPort.write("B1\r\n");
        }else if(boton == 4){
            soundAlarm->play();
        }
    });

}

///destructor
MainWindow::~MainWindow()
{
    delete  startButton;
    delete  prizeButton;
    delete  background;
    delete  ground;
    delete  bird;
    delete  scoreboard;
    delete  livesboard;
    delete  readyboard;
    delete  overboard;
    delete  titleboard;
    delete  pipe[0];
    delete  pipe[1];
    delete  pipe[2];
    //delete  billetero;
}


/**
 * @brief MainWindow::keyPressEvent Monitorea los eventos de presion de
 * teclas en el juego
 * @param event El evento de la tecla presionada
 */
void MainWindow::keyPressEvent(QKeyEvent *event)
{

    /* When the game playing, bird up */
    if(status == GAMEPLAY && event->key() == Qt::Key_Enter ) {
        bird->birdUp();
        soundWing->stop();
        soundWing->play();
    }

    else if( ( status == GAMEREADY) && lives > 0 && event->key() == Qt::Key_Enter ) {
        gamePlay();
    }

    else if(status == GAMEOVER){
        qDebug() << "LOSER!!!!" << endl;
    }
}

/**
 * @brief MainWindow::paintEvent Pinta la escene
 */
void MainWindow::paintEvent(QPaintEvent *)
{
    QPainter painter( bufferPixmap);
    /* Draw all the elements. */
    background->logic();
    background->draw(&painter);

    pipe[0]->logic();
    pipe[0]->draw(&painter);

    pipe[1]->logic();
    pipe[1]->draw(&painter);

    pipe[2]->logic();
    pipe[2]->draw(&painter);

    bird->logic();
    bird->draw(&painter);

    scoreboard->logic();
    scoreboard->draw(&painter);

    livesboard->logic();
    livesboard->draw(&painter);

    levelboard->logic();
    levelboard->draw(&painter);

    readyboard->logic();
    readyboard->draw(&painter);

    titleboard->logic();
    titleboard->draw(&painter);

    ground->logic();
    ground->draw(&painter);

    overboard->logic();
    overboard->draw(&painter);

    QPainter mainWindowPainter(this);
    mainWindowPainter.drawPixmap(QRect(0,0, width(), height()),* bufferPixmap);
    
    /**
      se verifica si el pajaro colisiona con con los tubos
      o con el suelo
      **/

    if( status == GAMEPLAY)
    {
        /* update the impact rectangle of bird. */
        impactBirdRect.moveCenter( bird->getBindRect().center());
        /* To test if the impact happened. */
        if(impactBirdRect.intersects( ground->getBindRect()))
        {
            soundHit->play();
            lostLife();
        }
        if( impactBirdRect.intersects( pipe[0]->getRect(above))
                || impactBirdRect.intersects( pipe[0]->getRect(following))
                || impactBirdRect.intersects( pipe[1]->getRect(above))
                || impactBirdRect.intersects( pipe[1]->getRect(following))
                || impactBirdRect.intersects( pipe[2]->getRect(above))
                || impactBirdRect.intersects( pipe[2]->getRect(following)))
        {
            //soundHit->play();
            soundDie->play();
            lostLife();
        }
    }
}

/**
 * @brief MainWindow::resizeEvent configura el tamaño de los componentes
 * cuando la ventana cambia de tamaño
 */
void MainWindow::resizeEvent(QResizeEvent *)
{
    startButton->setGeometry(QRect((20.0/288)* width(),
                                   (341.0/512)* height(),
                                   (117.0/288)* width(),
                                   (71.0/512)* height()));

    prizeButton->setGeometry(QRect((151.0/288)* width(),
                                   (341.0/512)* height(),
                                   (117.0/288)* width(),
                                   (71.0/512)* height()));
}

/**
 * @brief MainWindow::gameTitle
 */
void MainWindow::gameTitle()
{
    background->enabledLogic = true;
    background->enabledDraw = true;
    titleboard->enabledLogic = true;
    titleboard->enabledDraw = true;

    bird->enabledLogic = false;
    bird->enabledDraw = false;

    ground->enabledLogic = true;
    ground->enabledDraw = true;

    overboard->enabledLogic = false;
    overboard->enabledDraw = false;
    pipe[0]->enabledLogic = false;
    pipe[0]->enabledDraw = false;
    pipe[1]->enabledLogic = false;
    pipe[1]->enabledDraw = false;
    readyboard->enabledDraw = false;
    pipe[2]->enabledLogic = false;
    pipe[2]->enabledDraw = false;
    readyboard->enabledLogic = false;
    readyboard->enabledDraw = false;

    scoreboard->enabledLogic = false;
    scoreboard->enabledDraw = false;

    livesboard->enabledLogic = false;
    livesboard->enabledDraw = false;

    levelboard->enabledLogic= false;
    levelboard->enabledDraw= false;

    setButtonVisible(true,true,true);

    status = GAMETITLE;
    //startButton->setFocus();

    QTimer::singleShot(2000, this, [=](){
        startButton->pressed();
    });

    //MACHETASO
    //gameReady();
}

/**
 * @brief MainWindow::gameReady Prepara el juego para iniciar a jugar
 */
void MainWindow::gameReady()
{

    readyboard->enabledDraw = false;
    background->enabledLogic = true;
    background->enabledDraw = true;

    titleboard->enabledLogic = false;
    titleboard->enabledDraw = false;

    bird->enabledLogic = false;
    bird->enabledDraw = true;

    ground->enabledLogic = true;
    ground->enabledDraw = true;

    overboard->enabledLogic = false;
    overboard->enabledDraw = false;

    pipe[0]->enabledLogic = false;
    pipe[0]->enabledDraw = false;
    pipe[1]->enabledLogic = false;
    pipe[1]->enabledDraw = false;
    pipe[2]->enabledLogic = false;
    pipe[2]->enabledDraw = false;

    readyboard->enabledLogic = true;
    readyboard->enabledDraw = true;

    scoreboard->enabledDraw = true;

    livesboard->enabledLogic = true;
    livesboard->enabledDraw = true;


    levelboard->enabledLogic= true;
    levelboard->enabledDraw= true;


    setButtonVisible(true,true,false);
    status = GAMEREADY;
}

/**
 * @brief MainWindow::gamePlay
 */
void MainWindow::gamePlay()
{
    background->enabledLogic = true;
    background->enabledDraw = true;

    titleboard->enabledLogic = false;
    titleboard->enabledDraw = false;

    bird->enabledLogic = true;
    bird->enabledDraw = true;

    ground->enabledLogic = true;
    ground->enabledDraw = true;

    readyboard->enabledDraw = false;
    overboard->enabledLogic = false;
    overboard->enabledDraw = false;

    pipe[0]->enabledLogic = true;
    pipe[0]->enabledDraw = true;
    pipe[1]->enabledLogic = true;
    pipe[1]->enabledDraw = true;
    pipe[2]->enabledLogic = true;
    pipe[2]->enabledDraw = true;

    readyboard->enabledLogic = false;
    readyboard->enabledDraw = false;

    scoreboard->enabledLogic = true;
    scoreboard->enabledDraw = true;

    livesboard->enabledLogic = true;
    livesboard->enabledDraw = true;

    levelboard->enabledLogic= true;
    levelboard->enabledDraw= true;
    coinInEnable= false;
    coinInEnable= true;

    setButtonVisible(false, false, false);

    status = GAMEPLAY;
}

/**
 * @brief MainWindow::lostLife se llama cuando se pierde una vida en el  juego
 * para verificar si esta es la ultima vida que se tiene
 * o restablecer el juego en caso de que no lo sea
 */
void MainWindow::lostLife()
{
    --lives;

    overboard->mostrarReclamarPremio(false);
    qDebug() << "LEVEL: " << level << endl;
    if(lives <= 0 ){
        soundfail->play();
        lives = 0;
        settings.setValue("gameLives",lives);
        readyboard->mostrarIngreseDinero(true);
        pipe[0]->setSpeedX(initialVelocity);
        pipe[1]->setSpeedX(initialVelocity);
        pipe[2]->setSpeedX(initialVelocity);
        pipe[0]->setOccilation(false);
        pipe[1]->setOccilation(false);
        pipe[2]->setOccilation(false);
        pipe[0]->setRandomColor(false);
        pipe[1]->setRandomColor(false);
        pipe[2]->setRandomColor(false);
        gameOver();
        coinInEnable= true;
        return;
    }else{
        settings.setValue("gameLives",lives);

        overboard->setLostLife(true);
        background->enabledLogic = true;
        background->enabledDraw = true;

        titleboard->enabledLogic = false;
        titleboard->enabledDraw = false;

        bird->enabledLogic = true;
        bird->enabledDraw = true;

        ground->enabledLogic = false;
        ground->enabledDraw = true;

        pipe[0]->enabledLogic = false;
        pipe[0]->enabledDraw = true;
        pipe[1]->enabledLogic = false;
        pipe[1]->enabledDraw = true;
        pipe[2]->enabledLogic = false;
        pipe[2]->enabledDraw = true;

        readyboard->enabledLogic = false;
        readyboard->enabledDraw = false;

        scoreboard->enabledLogic = false;
        scoreboard->enabledDraw = false;

        livesboard->enabledLogic = false;
        livesboard->enabledDraw = false;

        levelboard->enabledLogic= false;
        levelboard->enabledDraw= false;

        overboard->setScore(score);
        overboard->enabledLogic = true;
        overboard->enabledDraw = true;

        level= 0;
        settings.setValue("gameLevel",level);
        score= 0;
        levelboard->setScore(level);
        scoreboard->setScore(score);
        livesboard->setScore(lives);
        status = LOSTLIFE;
    }
}

/**
 * @brief MainWindow::gameOver se llama cuando se pierde la ultima vida
 * o cuando se ha llegao al ultimo nivel del juego
 */
void MainWindow::gameOver()
{
    background->enabledLogic = true;
    background->enabledDraw = true;

    titleboard->enabledLogic = false;
    titleboard->enabledDraw = false;

    bird->enabledLogic = true;
    bird->enabledDraw = true;

    ground->enabledLogic = false;
    ground->enabledDraw = true;

    pipe[0]->enabledLogic = false;
    pipe[0]->enabledDraw = true;
    pipe[1]->enabledLogic = false;
    pipe[1]->enabledDraw = true;
    pipe[2]->enabledLogic = false;
    pipe[2]->enabledDraw = true;

    readyboard->enabledLogic = false;
    readyboard->enabledDraw = false;

    scoreboard->enabledLogic = false;
    scoreboard->enabledDraw = false;

    livesboard->enabledLogic = false;
    livesboard->enabledDraw = false;

    levelboard->enabledLogic= false;
    levelboard->enabledDraw= false;

    level=0;
    settings.setValue("gameLevel",level);
    score= 0;
    overboard->setScore(score);
    overboard->enabledLogic = true;
    overboard->enabledDraw = true;
    overboard->setGameOver(true);
    levelboard->setScore(level);
    scoreboard->setScore(score);
    livesboard->setScore(lives);

    status = GAMEOVER;
}

/**
 * @brief MainWindow::startGame
 */
void MainWindow::startGame()
{
    /* Init all the game elements. */
    background->init();
    bird->init();
    scoreboard->init();
    livesboard->init();
    levelboard->init();
    readyboard->init();
    overboard->init();
    pipe[0]->init();
    pipe[1]->init();
    pipe[2]->init();

    // Game Start.
    gameReady();
    soundSwooshing->play();
}

/**
 * @brief MainWindow::closeGame cierra el juego
 */
void MainWindow::closeGame()
{
    if(lives == 0){
        close();
    }
}

/**
 * @brief MainWindow::getScore obtiene el puntaje actual
 */
void MainWindow::getScore()
{
    score += 1;
    currentPipesToPass+= 1;
    scoreboard->setScore(score);
    soundPoint->play();
    emit scoreChanged(score);
}



/**
 * @brief MainWindow::setButtonVisible Especifica la visivilidad de
 * los bontones en la pantalla de inicio
 * @param _startBtn boton de inicio
 * @param _closeBtn boton de cerrado
 * @param _rateBtn indefinido
 */
void MainWindow::setButtonVisible(bool _startBtn, bool _closeBtn, bool _rateBtn)
{
    prizeButton->setVisible(_closeBtn);
    startButton->setVisible(_startBtn);
}



/**
 * @brief MainWindow::coinIn Se llama cuando ha entrado dinero a la maquina
 * para aumentar las vidad y guardar el ingreso de este en un archivo
 * @param dinero la cantidad de dinero ingresado
 */
void MainWindow::coinIn(int dinero){
    if(coinInEnable){
        lives+= dinero / priceLife;
        qDebug() << lives << endl;
        livesboard->setScore(lives);
        configurationFile::writeOnFile("/home/" +
                                       qgetenv("USER") + "/.config/flappyBirdConfig/ingresos",
                                       dinero );

        settings.setValue("gameLives",lives);
        readyboard->mostrarIngreseDinero(false);
    }

}


/**
 * @brief MainWindow::nextLevel establece si se ha superado la cantidad de tubos
 * necesarios para pasar al siguiente nivel
 * @param score puntaje actual, (el puntaje es igual al numero de tubos superados)
 */
void MainWindow::nextLevel(int score){
    if(currentPipesToPass == pipesLevel[level - 1]){
        soundlevelup->play();
        serialPort.write("W1\r\n");
        if(level == 10){
            gameOver();
        }

        jos->disconnect(0,0,0);
        QTimer::singleShot(3000, this, [=](){
            connect(jos, &joystick_flappy::buttom_pressed, this, [&](int boton){
                    if(boton == 0){
                        enterPressed();
                        if(status != GAMEPLAY){
                            serialPort.write("B2\r\n");
                        }
                    }else if(boton == 3){
                        coinIn(500);
                        serialPort.write("C1\r\n");
                    }else if(boton == 2) {
                        left_pressed();
                        if(status==DELIVERPRIZE){
                            if(level==3){
                                if(indexlight==7){
                                    indexlight=2;
                                }else{
                                    indexlight++;
                                }
                            }else if(level==6){
                                if(indexlight==8){
                                    indexlight=1;
                                }else{
                                    indexlight=8;
                                }
                            }else if(level==9){
                                if(indexlight==9){
                                    indexlight=0;
                                }else{
                                    indexlight=9;
                                }
                            }
                            QString light = QString("L%1\r\n").arg(indexlight);
                            serialPort.write(light.toLatin1().data());
                        }
                        serialPort.write("B3\r\n");
                    }else if(boton == 1){
                        right_pressed();
                        if(status == DELIVERPRIZE){
                            if(level==3){
                                if(indexlight==2){
                                    indexlight=7;
                                }else{
                                    indexlight--;
                                }
                            }else if(level==6){
                                if(indexlight==8){
                                    indexlight=1;
                                }else{
                                    indexlight=8;
                                }
                            }else if(level==9){
                                if(indexlight==9){
                                    indexlight=0;
                                }else{
                                    indexlight=9;
                                }
                            }
                            QString light = QString("L%1\r\n").arg(indexlight);
//                            qDebug() << light.toLatin1().data() << endl;
                            serialPort.write(light.toLatin1().data());
                        }
                        serialPort.write("B1\r\n");
                    }else if(boton == 4) soundAlarm->play();
                });
        });

        background->enabledLogic = true;
        background->enabledDraw = true;

        titleboard->enabledLogic = false;
        titleboard->enabledDraw = false;

        bird->enabledLogic = false;
        bird->enabledDraw = true;

        ground->enabledLogic = false;
        ground->enabledDraw = true;

        overboard->setScore(score);
        overboard->setLostLife(false);
        levelboard->setScore(level);
        overboard->enabledLogic = true;
        overboard->enabledDraw = true;

        pipe[0]->enabledLogic = false;
        pipe[0]->enabledDraw = true;
        pipe[1]->enabledLogic = false;
        pipe[1]->enabledDraw = true;
        pipe[2]->enabledLogic = false;
        pipe[2]->enabledDraw = true;

        readyboard->enabledLogic = false;
        readyboard->enabledDraw = false;

        scoreboard->enabledLogic = false;
        scoreboard->enabledDraw = false;

        livesboard->enabledLogic = false;
        livesboard->enabledDraw = false;

        levelboard->enabledLogic= false;
        levelboard->enabledDraw= false;

        if(level == 3 || level == 6 || level == 9 || level == -1){
            prizeButton->setEnabled(true);
            overboard->mostrarReclamarPremio(true);
        }else{
            prizeButton->setEnabled(false);
            overboard->mostrarReclamarPremio(false);
        }

        status = NEXTLEVEL;
    }
}

/**
 * @brief MainWindow::setNextLevel establece la veloidad de los tubos,
 * la occilacion de los tubos de acurdo al nivel actual
 */
void MainWindow::setNextLevel(){
    ++level;
    if(level == 10){
        gameOver();
        return;
    }
    settings.setValue("gameLevel",level);
    currentPipesToPass= 0;
    levelboard->setScore(level);
    qDebug() << "Set next level: " << level << endl;
    if(status == LOSTLIFE || status == GAMETITLE){
        pipe[0]->setSpeedX(initialVelocity);
        pipe[1]->setSpeedX(initialVelocity);
        pipe[2]->setSpeedX(initialVelocity);
        pipe[0]->setOccilation(false);
        pipe[1]->setOccilation(false);
        pipe[2]->setOccilation(false);

    }
    else if(level < 8){
        pipe[0]->setSpeedX(pipe[0]->getSpeedX() + increaseVelocity);
        pipe[1]->setSpeedX(pipe[1]->getSpeedX() + increaseVelocity);
        pipe[2]->setSpeedX(pipe[2]->getSpeedX() + increaseVelocity);
    }

    if(level >= levelOccilation){
        if(level == levelOccilation){
            pipe[0]->setSpeedX(initialVelocity);
            pipe[1]->setSpeedX(initialVelocity);
            pipe[2]->setSpeedX(initialVelocity);

        }
        //pipe[0]->setSpeedX(1.5);
        //pipe[1]->setSpeedX(1.5);
        //pipe[2]->setSpeedX(1.5);
        pipe[0]->setOccilation(true);
        pipe[1]->setOccilation(true);
        pipe[2]->setOccilation(true);
        pipe[0]->setRandomColor(true);
        pipe[1]->setRandomColor(true);
        pipe[2]->setRandomColor(true);
    }
}

/**
 * @brief MainWindow::deliverPrize contruye la ventana de entrega de premios
 */
void MainWindow::deliverPrize(){
    qDebug() << level << "deliver prize" << endl;
    if(level == 3 || level == 6 || level == 9 || level == -1 ){
        if(level == 3){
            indexlight=7;
            serialPort.write("L7\r\n");
        }else if(level == 6){
            indexlight=8;
            serialPort.write("L8\r\n");
        }else{
            indexlight=9;
            serialPort.write("L9\r\n");
        }
        status= DELIVERPRIZE;
        windowPrize->enablePrizes(level);

#ifdef DEBUG
        windowPrize->show();
#else
        windowPrize->showMaximized();
#endif
//        serialPort.write("L1\r\n");


    }else{
        return;
    }
}

/**
 * @brief MainWindow::enterPressed se llama cuando el boton central de la maquina
 * es presionado y dependiendo del contexto del juego se crea un evento de entrerPressed
 * o de spacePressed
 */
void MainWindow::enterPressed(){
    qDebug() << status << endl;
    if(status == DELIVERPRIZE){
        space_pressed();
    }else if(status == GAMEREADY || status == GAMEPLAY){
        enter_pressed();
    }else{
        space_pressed();
    }
}
